
zig 0.14:
- if sliceAsBytes/bytesAsSlice includes sentinel, then need to update our use
- if @src() gained a module field, then include it in the hash

check zig std lib for bytesAsSlice alignment - should it always aligncast?


doc comments and publish
update web-test and publish


can we save rendering commands and render to a texture we can get back?
- that would help plotting
- could make the demoButton's contents be static (cached images)


should do tabIndexSet if the element has size, so even if it's scrolled off the screen we still go to it
- when we do tabIndexNext/Prev it should focus that element and then also send a scroll_to message from that widget - how?

Is there a way to turn off tab indexing for stuff inside DemoButton?
- also turn off focus?

Add filter (nearest, linear) to image rendering

add animating example of a dialog that opens down and closes up
- replace the Scale one


textEntry: fix scroll_to_cursor
char_left
char_right
backspace
backspace with selection
delete_prev_word
delete
delete with selection
delete_next_word
enter
text
select_all


This was on current arch linux. The zig sdl package expects GLES/gl.h to exist, but on arch linux it is GLES2/gl2.h (or GLES3/gl3.h?). The system sdl package is (obviously) configured correctly, so it builds fine with that.

does it help web-test size to leave out some fonts and icons?


scrollContainer:
- doesn't do multiple widgets going horizontally
  - rectFor or minSizeForChild
- add a direction to scrollContainer that controls the direction widgets are added in



lock_visible
- also take into account any viewport movement that frame from events/velocity


do some profiling of the scrolling demo and add caching to BoxWidget?
- add some profiling infrastructure?
- if cache is true and we are outside clipping rectangle, then can skip children and just go again with our minSize


add Options.id_override to forcefully set the id
- use in textEntryNumber
- use in reoder so things don't reset when they get dragged/dropped
- search for all uses of extendId


add event handling demo
- use stroke test as a starting point and redo it
- show how to get mouse events?
- show how to alter keyboard events for textEntry?


textLayout:
- check that min width/height works when there are top corner widgets (top left, top right, both) but no text


try to decouple background from border


textEntryNumber example - show how to initialize with number and write back if the number validates?


consolidate touch editing selection


raylib backend
- directly call glfw.waitEventsTimeout?
- events
- instead of useTex, preload (or use raylib's) a 1x1 white texture
- use raylib's default shader (have to give up premultiplied alpha)
- on mac, two-finger scrolling in the demo window a lot hangs?
- enable by default

new theme fields

build needs an option to select backend?

touch dragging should probably not work when the size of the stuff inside the scroll area is less than the scroll area's size?
- otherwise you get lots of meaningless off-the-edge scrolling

README needs a section on themes
- and how the new fields interact

web-test: need to enlarge all the fonts, not just adwaita?

maybe toasts subwindow need some kind of outline?


test ability to scroll_drag on a touch screen - do we need a curtain area around the edge of the scrollarea/screen where touch events will cause a scroll drag?


web backend
- on phone chrome entering characters works, but backspace first removes characters from the keyboard buffer before we get them removed, something to do with IME

web backend clipboard
- ideally we should preventDefault on copy/paste events, then be able to access the clipboard

            navigator.clipboard.readText().then(function (text) {
                console.log("read: " + text);
            });


maybe expand should be a f32 instead of bool
- could express "want this to take up 1/3 of the space"
- could function as weights for BoxWidget

text rendering:
- investigate if with stb_truetype we can align horizontally to pixels?
- see if the vertical weirdness is global, maybe a canvas size thing?  Does it happen in the SDL demo?


add cursors to examples (row of buttons or something one for each cursor)

touch editing - when a paste or text insertion happens, toggle off the touch editing

on hidpi display, selecting a bunch of text leaves small gaps noticeable in the selection background
- only if the text is added char by char

paned should have an "autopos" mode where when not collapsed it will use the expand of the children to determine split
- this way you can have the split automatically be not 50/50


need a button for sizing/rotation for icon and raster that works continuously while you hold it down
- add option to Button where when in the down position it keeps refreshing

when new events come in, we assign the focus id, but probably shouldn't once we see a focus mouse event

need a strategy for activating paste from a menu, because the widget will lose focus when the menu is activated
- when the menu gets focus, maybe it saves the previous focus id?
- then when the paste menu item is clicked, it can send focus back to saved id
  - also need to synthesize an event so that widget processes a paste

add inertia to scrolling
- if the scrollContainer has more intertia scrolling to do, then it should eat all pointer events, because we don't want any pointer events going to children if the scrolling is still happening

switch from my freetype fork to Mach's

maybe builtin button should record multiple clicks?
- helps in low framerate situations

TextLayout support for large documents
- need a function to say "we are skipping a bunch of bytes" (might be useful for code folding as well)
- addTextDone needs to not always set cursor because there might be lots of text remaining that we aren't rendering

add alpha to Options as well and multiply it by the theme alpha

add backend function to allow screensaver

cross-widget dragging (for stuff like docking)
- dragPreStart and dragStart take a ?[]const u8 ("_dock")
- dragging also takes a ?[]const u8
  - will return the point if either widget has mouse capture or string matches
- widgets that only do mouse capture dragging can pass null
- other widgets have to coordinate via the string
  - need to be able to call dragging outside of processing events so you can change appearance if the drag you are interested in is happening

Tooltips:
- wrapper around thing you want the tooltip for
- floating windows similar to popup
- popup has 3-4 states:
  - ready (on first frame where the mouse pointer is above the rect, go to 
  showing)
  - timer (could go here and wait for timer)
  - showing (tooltip popup shows, go to off if the mouse pointer is not 
  above rect)
  - off (go to ready on a frame where the mouse pointer is off our rect)
  var ttw = ToolTipWidget.init...
- if (ttw.active()) |p| {
    // p is the point of the mouse when the tooltip was activated
    var ttp = TooltipPopupWidget.init... (pass in TooltipWidget's screenrect, optionally previous ttp if nested)
    // ttp
    ttp.install();
    // tooltip contents
    ttp.deinit();
    // ttp.deinit() checks:
      - if we have a live nested ttp, we stay alive
      - if the current mouse pointer is not above ttp OR the passed in ttw screenrect, we stay alive
      - if staying alive and we have a ttp parent, tell that parent we are live
  }

xstart and ystart for textSize

kerning

when we have a widget that has captured the mouse, need to capture the mouse in the underlying window system so click-dragging works even when the mouse pointer goes outside the window

